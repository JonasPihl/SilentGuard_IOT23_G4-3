Index: face detection application/app/src/main/java/com/example/face_detection_application/ui/settings/SettingsFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.face_detection_application.ui.settings;\r\n\r\nimport static java.lang.Math.pow;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.app.AlertDialog;\r\nimport android.app.TimePickerDialog;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Color;\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.Button;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\nimport android.widget.TimePicker;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.lifecycle.ViewModelProvider;\r\n\r\nimport com.example.face_detection_application.databinding.FragmentSettingsBinding;\r\nimport com.example.face_detection_application.ui.log.retrofitInterface;\r\n\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\nimport retrofit2.Retrofit;\r\nimport retrofit2.converter.gson.GsonConverterFactory;\r\n\r\n\r\n\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\nimport java.util.stream.DoubleStream;\r\n\r\npublic class SettingsFragment extends Fragment {\r\n\r\n    private FragmentSettingsBinding binding;\r\n    private boolean systemEnabled;\r\n    private static final String serverAdress = \"http://192.168.1.174:5000\";  // TODO Replace with Pi's IP\r\n\r\n\r\n    //private static final String serverAdress = \"http://192.168.0.13:5000\";  // TODO Replace with Pi's IP\r\n    ImageView colorWheel;\r\n    Bitmap colorBitMap;\r\n    String colorHexValue;\r\n    int red, green, blue;\r\n    Color completeColor;\r\n    Button timeStartButton;\r\n    Button timeEndButton;\r\n    int startHour, startMin;\r\n    int endHour, endMin;\r\n\r\n    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n        SettingsViewModel settingsViewModel =\r\n                new ViewModelProvider(this).get(SettingsViewModel.class);\r\n\r\n        binding = FragmentSettingsBinding.inflate(inflater, container, false);\r\n        View root = binding.getRoot();\r\n\r\n        getSystemState();\r\n\r\n        colorWheel = binding.colorWheel;\r\n        colorWheel.setVisibility(View.INVISIBLE);\r\n\r\n        timeStartButton = binding.timeStartButton;\r\n        timeEndButton = binding.timeEndButton;\r\n\r\n        timeStartButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n\r\n                createTimePickerDialog(v, true);\r\n\r\n            }\r\n        });\r\n        timeEndButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n\r\n                createTimePickerDialog(v, false);\r\n            }\r\n        });\r\n\r\n        binding.disableButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                systemEnabled = !systemEnabled;\r\n                Retrofit retrofit = new Retrofit.Builder().baseUrl(serverAdress).build();\r\n                retrofitInterface apiService = retrofit.create(retrofitInterface.class);\r\n                Call<Void> onOff = apiService.on_off(systemEnabled);\r\n\r\n                if (systemEnabled) {\r\n                    onOff.enqueue(new Callback<Void>() {\r\n                        @Override\r\n                        public void onResponse(Call<Void> call, Response<Void> response) {\r\n                            // Handle success\r\n\r\n                            System.out.println(\"Enabling system\");\r\n                        }\r\n\r\n                        @Override\r\n                        public void onFailure(Call<Void> call, Throwable t) {}\r\n                    });\r\n\r\n                } else {\r\n                    onOff.enqueue(new Callback<Void>() {\r\n                        @Override\r\n                        public void onResponse(Call<Void> call, Response<Void> response) {\r\n                            // Handle success\r\n                            binding.disableButton.setChecked(false);\r\n\r\n                            System.out.println(\"Disabling system\");\r\n                        }\r\n\r\n                        @Override\r\n                        public void onFailure(Call<Void> call, Throwable t) {}\r\n                    });\r\n                }\r\n            }\r\n        });\r\n\r\n        binding.colorButton.setOnClickListener(new View.OnClickListener() {\r\n            @SuppressLint(\"ClickableViewAccessibility\") //Supress accessability warning\r\n            @Override\r\n            public void onClick(View v) {\r\n                colorWheel = binding.colorWheel;\r\n\r\n                boolean isVisible = colorWheel.getVisibility() == View.VISIBLE;\r\n\r\n                if (isVisible){\r\n                    colorWheel.setVisibility(View.INVISIBLE);\r\n                    sendHexToHue(colorHexValue);\r\n\r\n                    if (completeColor != null){\r\n                        getRGBtoHueXY(completeColor);\r\n                    }\r\n\r\n                } else {\r\n                    colorWheel.setVisibility(View.VISIBLE);\r\n                }\r\n\r\n                colorWheel.setOnTouchListener(new View.OnTouchListener() {\r\n                    String startingColor = \"#fffe4b3f\"; //todo get live colorValue from hue system\r\n                    @Override\r\n                    public boolean onTouch(View v, MotionEvent event) {\r\n                        int x = (int)event.getX();\r\n                        int y = (int)event.getY();\r\n\r\n                        //todo Limit rate of retrieved hexValues from bitmap\r\n                        if (event.getAction() == MotionEvent.ACTION_DOWN || event.getAction() == MotionEvent.ACTION_MOVE){\r\n                            colorBitMap = getBitMapFromView(colorWheel);\r\n                        }\r\n\r\n                        int colorPixels = colorBitMap.getPixel(x, y);\r\n\r\n                        completeColor = colorBitMap.getColor(x, y);\r\n\r\n                        ///\r\n                        red = Color.red(colorPixels);\r\n                        green = Color.green(colorPixels);\r\n                        blue = Color.blue(colorPixels);\r\n                        ///\r\n\r\n                        colorHexValue = \"#\"+ Integer.toHexString(colorPixels);\r\n\r\n                        if (colorHexValue.equals(\"#0\")){\r\n                            colorHexValue = startingColor;\r\n                        }\r\n\r\n                        System.out.println(\"r g b: \" + red + \" \" + green + \" \" + blue);\r\n\r\n                        System.out.println(colorPixels);\r\n\r\n                        System.out.println(colorHexValue);\r\n\r\n                        return true;\r\n                    }\r\n                });\r\n\r\n            }\r\n        });\r\n\r\n        final TextView textView = binding.textNotifications;\r\n        settingsViewModel.getText().observe(getViewLifecycleOwner(), textView::setText);\r\n        return root;\r\n    }\r\n    ///\r\n    public static List<Double> getRGBtoHueXY(Color completeColor) {\r\n        // https://developers.meethue.com/develop/application-design-guidance/color-conversion-formulas-rgb-to-xy-and-back/\r\n        double red, green, blue;\r\n\r\n        //Breakout rgb values from color\r\n        red = completeColor.red();\r\n        green = completeColor.green();\r\n        blue = completeColor.blue();\r\n\r\n        //Gamma correction for colors\r\n        red = (red > 0.04045f) ? pow((red + 0.055f) / (1.0f + 0.055f), 2.4f) : (red / 12.92f);\r\n        green = (green > 0.04045f) ? pow((green + 0.055f) / (1.0f + 0.055f), 2.4f) : (green / 12.92f);\r\n        blue = (blue > 0.04045f) ? pow((blue + 0.055f) / (1.0f + 0.055f), 2.4f) : (blue / 12.92f);\r\n\r\n        //Convert RBG to XYZ with Wide RGB D65 formula\r\n        float X = (float) (red * 0.649926 + green * 0.103455 + blue * 0.197109);\r\n        float Y = (float) (red * 0.234327 + green * 0.743075 + blue * 0.022598);\r\n        float Z = (float) (red * 0.0000000 + green * 0.053077 + blue * 1.035763);\r\n\r\n        //Calculate XY values from XYZ\r\n        float x = X / (X + Y + Z);\r\n        float y = Y / (X + Y + Z);\r\n\r\n        double[] xy = new double[2];\r\n        xy[0] = x;\r\n        xy[1] = y;\r\n        List<Double> xyAsList = DoubleStream.of(xy).boxed().collect(Collectors.toList());\r\n\r\n        System.out.println(x + \" \" + y);\r\n        return xyAsList;\r\n    }\r\n    ///\r\n    @Override\r\n    public void onDestroyView() {\r\n        super.onDestroyView();\r\n        binding = null;\r\n    }\r\n    private void sendHexToHue(String colorHexValue){\r\n        //todo send colorHexValue to hue\r\n        if (colorHexValue != null){\r\n            System.out.println(colorHexValue + \" sent to hue\");\r\n        } else {\r\n            System.out.println(\"No color sent to hue.\");\r\n        }\r\n\r\n    }\r\n\r\n    private void getSystemState(){\r\n        Retrofit retrofit = new Retrofit.Builder().baseUrl(serverAdress)\r\n                .addConverterFactory(GsonConverterFactory.create())\r\n                .build();\r\n        retrofitInterface apiService = retrofit.create(retrofitInterface.class);\r\n        Call<Boolean> state_of_server = apiService.state_of_server();\r\n        state_of_server.enqueue(new Callback<Boolean>() {\r\n            @Override\r\n            public void onResponse(Call<Boolean> call, Response<Boolean> response) {\r\n                if (response.isSuccessful()) {\r\n                    // Set status of the btn according to server repsonse\r\n                    binding.disableButton.setChecked(response.body());\r\n                }\r\n            }\r\n            @Override\r\n            public void onFailure(Call<Boolean> call, Throwable t) {\r\n                getSystemState();\r\n            }\r\n        });\r\n    }\r\n\r\n    private Bitmap getBitMapFromView(View view) {\r\n        Bitmap bitmap = Bitmap.createBitmap(\r\n                view.getWidth(), view.getHeight(), Bitmap.Config.ARGB_8888\r\n        );\r\n        Canvas canvas = new Canvas(bitmap);\r\n        view.draw(canvas);\r\n        return bitmap;\r\n    }\r\n\r\n    private void createTimePickerDialog(View view, Boolean isStartTimeButton){\r\n        TimePickerDialog.OnTimeSetListener onTimeSetListener = new TimePickerDialog.OnTimeSetListener() {\r\n            @Override\r\n            public void onTimeSet(TimePicker view, int hourOfDay, int minute) {\r\n                if (isStartTimeButton){\r\n                    startHour = hourOfDay;\r\n                    startMin = minute;\r\n                    timeStartButton.setText(String.format(\"%02d:%02d\", startHour, startMin));\r\n                } else {\r\n                    endHour = hourOfDay;\r\n                    endMin = minute;\r\n                    timeEndButton.setText(String.format(\"%02d:%02d\", endHour, endMin));\r\n                }\r\n            }\r\n        };\r\n\r\n        int dialogTheme = AlertDialog.THEME_HOLO_LIGHT;\r\n        TimePickerDialog timePickerDialog = new TimePickerDialog(requireContext(), dialogTheme, onTimeSetListener, startHour, startMin, true);\r\n        timePickerDialog.updateTime(0, 0);\r\n        timePickerDialog.show();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/face detection application/app/src/main/java/com/example/face_detection_application/ui/settings/SettingsFragment.java b/face detection application/app/src/main/java/com/example/face_detection_application/ui/settings/SettingsFragment.java
--- a/face detection application/app/src/main/java/com/example/face_detection_application/ui/settings/SettingsFragment.java	
+++ b/face detection application/app/src/main/java/com/example/face_detection_application/ui/settings/SettingsFragment.java	
@@ -46,10 +46,9 @@
 
     private FragmentSettingsBinding binding;
     private boolean systemEnabled;
-    private static final String serverAdress = "http://192.168.1.174:5000";  // TODO Replace with Pi's IP
-
-
+    //private static final String serverAdress = "http://192.168.1.174:5000";  // TODO Replace with Pi's IP
     //private static final String serverAdress = "http://192.168.0.13:5000";  // TODO Replace with Pi's IP
+    private static final String serverAdress = "http://192.168.10.193:5000";  // TODO Replace with Pi's IP
     ImageView colorWheel;
     Bitmap colorBitMap;
     String colorHexValue;
